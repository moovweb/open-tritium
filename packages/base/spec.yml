Base:
  var:
    opens: Text
    alias: $
    returns: Text
    arguments:
      -
        name: Name
        doc: The name of the var. Something like $name or var('name')
      -
        name: Value
        doc: The value you want to set the var to. Same as var('name') { set('value') }
        expansion: true
  time:
    returns: Text
    doc: If given a block, it returns the time-to-execute as a string (time units vary by implementation)
  debug:
    doc: Placeholder function for any engine-specific debug duties.
    returns: Text
    hide: true
    debug: true
    arguments:
      -
        name: Debug ID
        doc: Whatever ID you give it, that will be how the project is written down in the debug database!
  match:
    doc: 
    returns: Text
    arguments:
      -
        name: Match Target
        doc: What are we matching against? 
  log:
    opens: Text
    doc: Writes out a string to the console and debug log
    returns: Text
    arguments:
      - 
        name: Log message
        doc: Debug Line! Just type something!
  not_text:
    doc: Used with match($var, not('hi'))
    hide: true
    returns: Text
    return_doc: Either "true" or "false"
    arguments:
      -
        name: Text
        doc: Text to match with. Only perfect match
  not_regexp:
    doc: Used with match($var, not(/hi/))
    hide: true
    returns: Text
    return_doc: Either "true" or "false"
    arguments:
      -
        name: Regexp
        doc: Regexp to match with.
  with_text:
    doc: Used with match($var, 'hi')
    hide: true
    returns: Text
    return_doc: Either "true" or "false"
    arguments:
      -
        name: Text
        doc: Text to match with. Only perfect match
  with_regexp:
    doc: Used with match($var, /hi/)
    hide: true
    returns: Text
    return_doc: Either "true" or "false"
    arguments:
      -
        name: Regexp
        doc: Regexp to match with.
  regexp:
    opens: Text
    returns: Regexp
    doc: Any value passed into this function will return a regex --- ready for fancy replace() or match() usage. NOTE! Use hard-coded regex if you can. This is much slower than hard-coding regex!
    hide: true
    arguments:
      -
        name: Expression
        doc: The regular expression you want built
  concat:
    opens: Text
    returns: Text
    doc: A function for concatenating strings. Can accept 2 or more args
    arguments:
      -
        name: First Value
      -
        name: Second Value
  export:
    opens: Text
    returns: Text
    doc: This is a the way that we have Tritium communicate variables back to its execution environment. That sounds complicated, but in most uses of Tritium, it would be something like export("Content-Type", "application/js") to tell the app to change the content-type. Look at the reference for your server for click for example on what you can export.
    arguments:
      -
        name: Key name
        type: Text
  upcase:
    returns: Text
    doc: Returns the input argument in ALL CAPS
    arguments:
      -
        name: Input String
        type: Text
  downcase:
    returns: Text
    doc: Returns the input argument in lower case
    arguments:
      -
        name: Input String
        type: Text
Text:
  text:
    opens: Text
    doc: Returns the current text scope as a string. Useful to pass the current Text as an argument
    returns: true
  set:
    doc: Replace the entire current text with what you pass in
    arguments:
      -
        name: Value
        doc: The string you want to replace the whole thing with!
  replace:
    doc: Replace all instances of the first argument with the second argument. This yields to a Text scope that allows you to set the Replacement string. Very powerful stuff. Look at the examples.
    opens: Text
    arguments:
      -
        name: Regex
        type: Regexp
  prepend:
    doc: Prepend the string to the front of the text area
    arguments: 
      -
        name: Text to prepend
  append:
    doc: Append the string to the front of the text area
    arguments: 
      -
        name: Text to append